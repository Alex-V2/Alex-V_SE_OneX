From 2b26d0a0902a168d35ae99846d97a48cfb345079 Mon Sep 17 00:00:00 2001
From: Victor Goldenshtein <victorg@ti.com>
Date: Thu, 17 May 2012 18:51:24 +0300
Subject: [PATCH 27/40] nl80211/cfg80211: add channel switch request command

Add new NL80211_CMD_REQ_CH_SW, which requests from usermode
to perform a channel switch operation for GO/AP.

Signed-off-by: Victor Goldenshtein <victorg@ti.com>
---
 drivers/net/wireless/compat-wireless_R5.SP2.03/include/linux/nl80211.h |    4 ++++
 drivers/net/wireless/compat-wireless_R5.SP2.03/include/net/cfg80211.h  |   12 ++++++++++++
 drivers/net/wireless/compat-wireless_R5.SP2.03/net/wireless/mlme.c     |   11 +++++++++++
 drivers/net/wireless/compat-wireless_R5.SP2.03/net/wireless/nl80211.c  |   36 ++++++++++++++++++++++++++++++++++++
 drivers/net/wireless/compat-wireless_R5.SP2.03/net/wireless/nl80211.h  |    5 +++++
 5 files changed, 68 insertions(+), 0 deletions(-)

diff --git a/drivers/net/wireless/compat-wireless_R5.SP2.03/include/linux/nl80211.h b/drivers/net/wireless/compat-wireless_R5.SP2.03/include/linux/nl80211.h
index 516f8d6..cede760 100644
--- a/drivers/net/wireless/compat-wireless_R5.SP2.03/include/linux/nl80211.h
+++ b/drivers/net/wireless/compat-wireless_R5.SP2.03/include/linux/nl80211.h
@@ -583,6 +583,8 @@
  *      disabled (marked by the presence of @NL80211_ATTR_ROAMING_DISABLED flag)
  *      userspace should disable background scans and roaming attempts.
  *
+ * @NL80211_CMD_REQ_CH_SW: Request a channel switch from a GO/AP.
+ *
  * @NL80211_CMD_MAX: highest used command number
  * @__NL80211_CMD_AFTER_LAST: internal use
  */
@@ -733,6 +735,8 @@ enum nl80211_commands {
 
 	NL80211_CMD_ROAMING_SUPPORT,
 
+	NL80211_CMD_REQ_CH_SW,
+
 	/* add new commands above here */
 
 	/* used to define NL80211_CMD_MAX below */
diff --git a/drivers/net/wireless/compat-wireless_R5.SP2.03/include/net/cfg80211.h b/drivers/net/wireless/compat-wireless_R5.SP2.03/include/net/cfg80211.h
index 39b35d2..9ca027d 100644
--- a/drivers/net/wireless/compat-wireless_R5.SP2.03/include/net/cfg80211.h
+++ b/drivers/net/wireless/compat-wireless_R5.SP2.03/include/net/cfg80211.h
@@ -3325,6 +3325,18 @@ bool cfg80211_rx_unexpected_4addr_frame(struct net_device *dev,
 					const u8 *addr, gfp_t gfp);
 
 /**
+ * cfg80211_req_channel_switch - request channel switch for GO/AP
+ * @dev: The device the frame matched to
+ * @gfp: context flags
+ * &chan: desired channel
+ *
+ * This function is used in AP/GO mode to request userspace to switch
+ * to a new channel.
+ */
+void cfg80211_req_channel_switch(struct net_device *dev,
+				 struct ieee80211_channel *chan, gfp_t gfp);
+
+/**
  * cfg80211_probe_status - notify userspace about probe status
  * @dev: the device the probe was sent on
  * @addr: the address of the peer
diff --git a/drivers/net/wireless/compat-wireless_R5.SP2.03/net/wireless/mlme.c b/drivers/net/wireless/compat-wireless_R5.SP2.03/net/wireless/mlme.c
index 438dfc1..a3735e9 100644
--- a/drivers/net/wireless/compat-wireless_R5.SP2.03/net/wireless/mlme.c
+++ b/drivers/net/wireless/compat-wireless_R5.SP2.03/net/wireless/mlme.c
@@ -1169,3 +1169,14 @@ bool cfg80211_rx_unexpected_4addr_frame(struct net_device *dev,
 	return nl80211_unexpected_4addr_frame(dev, addr, gfp);
 }
 EXPORT_SYMBOL(cfg80211_rx_unexpected_4addr_frame);
+
+void cfg80211_req_channel_switch(struct net_device *dev,
+				 struct ieee80211_channel *chan, gfp_t gfp)
+{
+	struct wireless_dev *wdev = dev->ieee80211_ptr;
+	struct wiphy *wiphy = wdev->wiphy;
+	struct cfg80211_registered_device *rdev = wiphy_to_dev(wiphy);
+
+	nl80211_req_channel_switch(rdev, chan, dev, gfp);
+}
+EXPORT_SYMBOL(cfg80211_req_channel_switch);
diff --git a/drivers/net/wireless/compat-wireless_R5.SP2.03/net/wireless/nl80211.c b/drivers/net/wireless/compat-wireless_R5.SP2.03/net/wireless/nl80211.c
index 46b1328..9567d3a 100644
--- a/drivers/net/wireless/compat-wireless_R5.SP2.03/net/wireless/nl80211.c
+++ b/drivers/net/wireless/compat-wireless_R5.SP2.03/net/wireless/nl80211.c
@@ -7921,6 +7921,42 @@ nl80211_send_cqm_pktloss_notify(struct cfg80211_registered_device *rdev,
 	nlmsg_free(msg);
 }
 
+void nl80211_req_channel_switch(struct cfg80211_registered_device *rdev,
+				struct ieee80211_channel *chan,
+				struct net_device *netdev, gfp_t gfp)
+{
+	struct sk_buff *msg;
+	void *hdr;
+
+	msg = nlmsg_new(NLMSG_DEFAULT_SIZE, gfp);
+	if (!msg)
+		return;
+
+	hdr = nl80211hdr_put(msg, 0, 0, 0, NL80211_CMD_REQ_CH_SW);
+	if (!hdr) {
+		nlmsg_free(msg);
+		return;
+	}
+
+	if (nla_put_u32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx) ||
+	    nla_put_u32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex) ||
+	    nla_put_u32(msg, NL80211_ATTR_WIPHY_FREQ, chan->center_freq))
+		goto nla_put_failure;
+
+	if (genlmsg_end(msg, hdr) < 0) {
+		nlmsg_free(msg);
+		return;
+	}
+
+	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
+				nl80211_mlme_mcgrp.id, gfp);
+	return;
+
+ nla_put_failure:
+	genlmsg_cancel(msg, hdr);
+	nlmsg_free(msg);
+}
+
 void cfg80211_probe_status(struct net_device *dev, const u8 *addr,
 			   u64 cookie, bool acked, gfp_t gfp)
 {
diff --git a/drivers/net/wireless/compat-wireless_R5.SP2.03/net/wireless/nl80211.h b/drivers/net/wireless/compat-wireless_R5.SP2.03/net/wireless/nl80211.h
index 66762fe..5e489dd 100644
--- a/drivers/net/wireless/compat-wireless_R5.SP2.03/net/wireless/nl80211.h
+++ b/drivers/net/wireless/compat-wireless_R5.SP2.03/net/wireless/nl80211.h
@@ -107,6 +107,11 @@ nl80211_send_cqm_rssi_notify(struct cfg80211_registered_device *rdev,
 			     struct net_device *netdev,
 			     enum nl80211_cqm_rssi_threshold_event rssi_event,
 			     gfp_t gfp);
+
+void nl80211_req_channel_switch(struct cfg80211_registered_device *rdev,
+				struct ieee80211_channel *chan,
+				struct net_device *netdev, gfp_t gfp);
+
 void
 nl80211_send_cqm_pktloss_notify(struct cfg80211_registered_device *rdev,
 				struct net_device *netdev, const u8 *peer,
-- 
1.7.0.4

