From 549ba9d98e165eb144d170d1b97c92f97219b81d Mon Sep 17 00:00:00 2001
From: Victor Goldenshtein <victorg@ti.com>
Date: Thu, 30 Aug 2012 09:46:39 +0300
Subject: [PATCH 34/40] mac80211: request AP/GO channel switch if needed

For devices which support MR on a single channel
we must perform a channel alignment between roles.
This patch handles the case when an AP/GO role is
started on channel X and a second STA role starts
the authentication process on channel Y, in this
case:

1. postpone the auth process of the second role.
2. request from the userspace to switch to channel Y.
3. wait for the channel switch to complete for the first role.
4. continue with auth process.

Signed-off-by: Victor Goldenshtein <victorg@ti.com>
---
 drivers/net/wireless/compat-wireless_R5.SP2.03/net/mac80211/ieee80211_i.h |    2 +
 drivers/net/wireless/compat-wireless_R5.SP2.03/net/mac80211/mlme.c        |    5 +++
 drivers/net/wireless/compat-wireless_R5.SP2.03/net/mac80211/work.c        |   63 ++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 70 insertions(+), 0 deletions(-)

diff --git a/drivers/net/wireless/compat-wireless_R5.SP2.03/net/mac80211/ieee80211_i.h b/drivers/net/wireless/compat-wireless_R5.SP2.03/net/mac80211/ieee80211_i.h
index e7755be..d940540 100644
--- a/drivers/net/wireless/compat-wireless_R5.SP2.03/net/mac80211/ieee80211_i.h
+++ b/drivers/net/wireless/compat-wireless_R5.SP2.03/net/mac80211/ieee80211_i.h
@@ -935,6 +935,8 @@ struct ieee80211_local {
 	struct ieee80211_channel *oper_channel, *csa_channel;
 	struct ieee80211_channel *ap_cs_channel;
 	enum nl80211_channel_type ap_cs_type;
+	/* Channel switch request completion */
+	struct completion *csr_compl;
 
 	/* Temporary remain-on-channel for off-channel operations */
 	struct ieee80211_channel *tmp_channel;
diff --git a/drivers/net/wireless/compat-wireless_R5.SP2.03/net/mac80211/mlme.c b/drivers/net/wireless/compat-wireless_R5.SP2.03/net/mac80211/mlme.c
index 06aed92..506f5d2 100644
--- a/drivers/net/wireless/compat-wireless_R5.SP2.03/net/mac80211/mlme.c
+++ b/drivers/net/wireless/compat-wireless_R5.SP2.03/net/mac80211/mlme.c
@@ -2973,6 +2973,11 @@ void ieee80211_ap_ch_switch_done_work(struct work_struct *work)
 
 	cfg80211_ch_switch_notify(sdata->dev, local->oper_channel->center_freq,
 				  local->_oper_channel_type);
+
+	if (local->csr_compl) {
+		complete(local->csr_compl);
+		local->csr_compl = NULL;
+	}
 }
 
 void ieee80211_ap_ch_switch_done(struct ieee80211_vif *vif,
diff --git a/drivers/net/wireless/compat-wireless_R5.SP2.03/net/mac80211/work.c b/drivers/net/wireless/compat-wireless_R5.SP2.03/net/mac80211/work.c
index 8eedf5d..c976771 100644
--- a/drivers/net/wireless/compat-wireless_R5.SP2.03/net/mac80211/work.c
+++ b/drivers/net/wireless/compat-wireless_R5.SP2.03/net/mac80211/work.c
@@ -892,6 +892,67 @@ static void ieee80211_work_timer(unsigned long data)
 	ieee80211_queue_work(&local->hw, &local->work_work);
 }
 
+static void ieee80211_sw_ap_ch_if_needed(struct ieee80211_local *local)
+{
+	struct ieee80211_work *wk, *tmp;
+	struct ieee80211_sub_if_data *sdata = NULL, *ap_sdata = NULL;
+	struct ieee80211_channel *ap_ch_sw_req = NULL;
+	DECLARE_COMPLETION_ONSTACK(compl);
+	unsigned int ap_cs_grace_period = 0;
+	unsigned long csr_timeout = 0;
+
+	mutex_lock(&local->mtx);
+	list_for_each_entry(sdata, &local->interfaces, list) {
+		if ((sdata->vif.type == NL80211_IFTYPE_AP) &&
+		    ieee80211_sdata_running(sdata) &&
+		    (sdata->vif.bss_conf.enable_beacon)) {
+			ap_sdata = sdata;
+			break;
+		}
+	}
+
+	if (ap_sdata) {
+		list_for_each_entry_safe(wk, tmp, &local->work_list, list) {
+			if (((wk->sdata->vif.type == NL80211_IFTYPE_STATION) &&
+			    (wk->type == IEEE80211_WORK_AUTH)) &&
+			    ieee80211_sdata_running(wk->sdata) &&
+			    (local->oper_channel != wk->chan)) {
+				/* request channel switch for the AP role */
+				ap_ch_sw_req = wk->chan;
+				break;
+			}
+		}
+	}
+
+	if (ap_ch_sw_req) {
+		struct ieee80211_bss_conf *bss_conf = &ap_sdata->vif.bss_conf;
+		printk(KERN_DEBUG "%s: request %s to switch to channel %d\n",
+		       wk->sdata->name, ap_sdata->name, ap_ch_sw_req->hw_value);
+		ieee80211_req_channel_switch(&ap_sdata->vif, ap_ch_sw_req,
+					     GFP_KERNEL);
+		csr_timeout = msecs_to_jiffies(bss_conf->beacon_int * 10);
+		ap_cs_grace_period =
+			bss_conf->dtim_period * bss_conf->beacon_int * 2;
+	}
+	mutex_unlock(&local->mtx);
+
+	if (ap_cs_grace_period) {
+		int ret;
+		local->csr_compl = &compl;
+		/* wait for channel switch to complete */
+		ret = wait_for_completion_timeout(&compl, csr_timeout);
+		if (ret == 0)
+			WARN(1, "completion timeout");
+		else if (ret < 0)
+			WARN(1, "completion error");
+		/*
+		 * give the AP some time to start beaconing on the new
+		 * channel, otherwise it might loose peers
+		 */
+		msleep(ap_cs_grace_period);
+	}
+}
+
 static void ieee80211_work_work(struct work_struct *work)
 {
 	struct ieee80211_local *local =
@@ -916,6 +977,8 @@ static void ieee80211_work_work(struct work_struct *work)
 	while ((skb = skb_dequeue(&local->work_skb_queue)))
 		ieee80211_work_rx_queued_mgmt(local, skb);
 
+	ieee80211_sw_ap_ch_if_needed(local);
+
 	mutex_lock(&local->mtx);
 
 	ieee80211_recalc_idle(local);
-- 
1.7.0.4

